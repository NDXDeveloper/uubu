# Makefile pour uubu
.PHONY: build test clean run help install build-arm64 build-all build-deb-arm64 package-all

# Variables
BINARY_NAME=uubu
MAIN_FILES=main.go
VERSION ?= $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
BUILD_TIME = $(shell date -u +%Y-%m-%dT%H:%M:%SZ)
GIT_COMMIT = $(shell git rev-parse HEAD 2>/dev/null || echo "unknown")

# Flags de build avec injection des variables
LDFLAGS_BASE = -X main.version=$(VERSION) -X main.buildTime=$(BUILD_TIME) -X main.gitCommit=$(GIT_COMMIT)
LDFLAGS_RELEASE = -s -w $(LDFLAGS_BASE)

# D√©tection automatique de l'architecture
ARCH ?= $(shell uname -m)
ifeq ($(ARCH),x86_64)
    GOARCH_HOST = amd64
else ifeq ($(ARCH),aarch64)
    GOARCH_HOST = arm64
else ifeq ($(ARCH),arm64)
    GOARCH_HOST = arm64
else
    GOARCH_HOST = amd64
endif

# Commandes principales
check-nfpm: ## V√©rifier si nfpm est install√©
	@if ! command -v nfpm >/dev/null 2>&1; then \
		echo "‚ùå nfpm n'est pas install√©!"; \
		echo "üì¶ Installation avec Go: go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest"; \
		echo "üì¶ Ou avec apt via le repo: https://github.com/goreleaser/nfpm/releases/ "; \
		exit 1; \
	fi
	@echo "‚úÖ nfpm est install√©"

# Construction du package .deb
install-nfpm: ## Installer nfpm automatiquement
	@echo "üîç V√©rification de nfpm..."
	@if command -v nfpm >/dev/null 2>&1; then \
		echo "‚úÖ nfpm est d√©j√† install√©: $$(nfpm version)"; \
	else \
		echo "üì¶ Installation de nfpm..."; \
		if command -v go >/dev/null 2>&1; then \
			echo "üîß Installation via Go..."; \
			go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest; \
			if command -v nfpm >/dev/null 2>&1; then \
				echo "‚úÖ nfpm install√© avec succ√®s via Go"; \
			else \
				echo "‚ö†Ô∏è  nfpm install√© mais pas dans le PATH. Ajoutez $$(go env GOPATH)/bin √† votre PATH"; \
				echo "   export PATH=\$$PATH:$$(go env GOPATH)/bin"; \
			fi; \
		else \
			wget https://github.com/goreleaser/nfpm/releases/download/v2.43.0/nfpm_2.43.0_amd64.deb ; \
			sudo dpkg -i nfpm_2.43.0_amd64.deb ; \
		fi; \
		if command -v nfpm >/dev/null 2>&1; then \
			echo "‚úÖ nfpm est maintenant disponible: $$(nfpm version)"; \
		else \
			echo "‚ùå Probl√®me lors de l'installation de nfpm"; \
			exit 1; \
		fi; \
	fi

build: ## Compiler le binaire (architecture h√¥te)
	@echo "üî® Compilation pour $(GOARCH_HOST)..."
	go build -ldflags "$(LDFLAGS_BASE)" -o $(BINARY_NAME) $(MAIN_FILES)

build-release: ## Compiler le binaire optimis√© (release) pour l'architecture h√¥te
	@echo "üî® Compilation release pour $(GOARCH_HOST)..."
	go build -ldflags "$(LDFLAGS_RELEASE)" -trimpath -o $(BINARY_NAME) $(MAIN_FILES)
	cp $(BINARY_NAME) $(BINARY_NAME)-linux-$(GOARCH_HOST)

build-amd64: ## Compiler sp√©cifiquement pour AMD64
	@echo "üî® Compilation pour AMD64..."
	GOOS=linux GOARCH=amd64 go build -ldflags "$(LDFLAGS_RELEASE)" -trimpath -o $(BINARY_NAME)-linux-amd64 $(MAIN_FILES)

build-arm64: ## Compiler sp√©cifiquement pour ARM64
	@echo "üî® Compilation pour ARM64..."
	GOOS=linux GOARCH=arm64 go build -ldflags "$(LDFLAGS_RELEASE)" -trimpath -o $(BINARY_NAME)-linux-arm64 $(MAIN_FILES)

build-all: build-amd64 build-arm64 ## Compiler pour toutes les architectures
	@echo "‚úÖ Compilation termin√©e pour toutes les architectures"
	@ls -la $(BINARY_NAME)-linux-*

build-deb: install-nfpm build-amd64 ## Construire le package .deb AMD64
	@echo "üî® Construction du package .deb AMD64..."
	@cp $(BINARY_NAME)-linux-amd64 $(BINARY_NAME)
	@VERSION=$(VERSION) nfpm package --config nfpm.yaml --packager deb --target $(BINARY_NAME)-$(VERSION)-amd64.deb
	@echo "‚úÖ Package .deb AMD64 cr√©√©"
	@chmod a+r $(BINARY_NAME)-$(VERSION)-amd64.deb
	@ls -la *.deb
	@rm $(BINARY_NAME)


build-deb-arm64: install-nfpm build-arm64 ## Construire le package .deb ARM64
	@echo "üî® Construction du package .deb ARM64..."
	@cp $(BINARY_NAME)-linux-arm64 $(BINARY_NAME)
	@# Cr√©er un fichier nfpm temporaire pour ARM64
	@sed 's/amd64/arm64/g' nfpm.yaml > nfpm-arm64.yaml
	@VERSION=$(VERSION) nfpm package --config nfpm-arm64.yaml --packager deb --target $(BINARY_NAME)-$(VERSION)-arm64.deb
	@rm -f nfpm-arm64.yaml
	@echo "‚úÖ Package .deb ARM64 cr√©√©"
	@chmod a+r $(BINARY_NAME)-$(VERSION)-arm64.deb
	@ls -la *.deb
	@rm $(BINARY_NAME)

build-deb-all: build-deb build-deb-arm64 ## Construire les packages .deb pour toutes les architectures
	@echo "‚úÖ Tous les packages .deb cr√©√©s"
	@ls -la *.deb

version: ## Afficher la version qui sera compil√©e
	@echo "Version: $(VERSION)"
	@echo "Build time: $(BUILD_TIME)"
	@echo "Git commit: $(GIT_COMMIT)"
	@echo "Host architecture: $(GOARCH_HOST)"

# V√©rification des fichiers de langues
check-locales: ## V√©rifier les fichiers de langues
	@echo "üåç V√©rification des fichiers de langues..."
	@if [ ! -d "locales" ]; then \
		echo "‚ùå Dossier 'locales' manquant!"; \
		exit 1; \
	fi
	@for lang in en fr de es; do \
		if [ ! -f "locales/$$lang.json" ]; then \
			echo "‚ùå Fichier locales/$$lang.json manquant!"; \
			exit 1; \
		else \
			echo "‚úÖ locales/$$lang.json trouv√©"; \
		fi; \
	done
	@echo "üåç Tous les fichiers de langues sont pr√©sents"

# Validation JSON des fichiers de langues
validate-locales: ## Valider la syntaxe JSON des fichiers de langues
	@echo "üîç Validation JSON des fichiers de langues..."
	@for file in locales/*.json; do \
		echo "Validation de $$file..."; \
		if command -v jq >/dev/null 2>&1; then \
			jq empty "$$file" && echo "‚úÖ $$file valide" || (echo "‚ùå $$file invalide" && exit 1); \
		else \
			python3 -m json.tool "$$file" >/dev/null && echo "‚úÖ $$file valide" || (echo "‚ùå $$file invalide" && exit 1); \
		fi; \
	done

# Tests avec diff√©rentes langues
test-langs: build ## Tester avec diff√©rentes langues
	@echo "üß™ Test avec diff√©rentes langues..."
	@for lang in en fr de es; do \
		echo "Test avec langue: $$lang"; \
		UUBU_LANG=$$lang ./$(BINARY_NAME) --version; \
	done

# Tests de base
test: check-locales ## Ex√©cuter les tests
	@echo "üß™ Ex√©cution des tests..."
	go test -v ./...

# Tests avec plus de d√©tails
test-verbose: ## Tests d√©taill√©s
	@echo "üîç Tests d√©taill√©s..."
	go test -v -race ./...

# Tests rapides (sans int√©gration)
test-short: ## Tests rapides
	@echo "‚ö° Tests rapides..."
	go test -short ./...

# Couverture de code
test-coverage: ## Analyse de couverture
	@echo "üìä Analyse de couverture..."
	go test -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html
	@echo "üìà Rapport de couverture g√©n√©r√©: coverage.html"

run: build ## Compiler et lancer l'application
	./$(BINARY_NAME)

install: build ## Installer le binaire dans /usr/local/bin
	@echo "üì¶ Installation..."
	sudo cp $(BINARY_NAME) /usr/local/bin/
	@echo "‚úÖ $(BINARY_NAME) install√© dans /usr/local/bin/"

uninstall: ## D√©sinstaller le binaire
	@echo "üóëÔ∏è  D√©sinstallation..."
	sudo rm -f /usr/local/bin/$(BINARY_NAME)
	@echo "‚úÖ $(BINARY_NAME) d√©sinstall√©"

clean: ## Nettoyer les fichiers g√©n√©r√©s
	@echo "üßπ Nettoyage..."
	rm -f $(BINARY_NAME)
	rm -f $(BINARY_NAME)-linux-*
	rm -f *.deb
	rm -f coverage.out coverage.html
	rm -f *.csv
	rm -f nfpm-arm64.yaml
	rm -rf dist/

# Commandes de d√©veloppement
dev: ## Mode d√©veloppement avec rebuild automatique
	@echo "üîÑ Mode d√©veloppement - Ctrl+C pour arr√™ter"
	@while inotifywait -e modify *.go locales/*.json 2>/dev/null; do \
		make build && echo "‚úÖ Rebuild termin√©"; \
	done

fmt: ## Formater automatiquement le code
	@echo "üé® Formatage du code..."
	go fmt ./...
	@if command -v goimports >/dev/null 2>&1; then \
		echo "üì¶ Correction des imports..."; \
		goimports -w .; \
	else \
		echo "‚ö†Ô∏è  goimports non install√©. Installation..."; \
		go install golang.org/x/tools/cmd/goimports@latest; \
		goimports -w .; \
	fi

fix: ## Corriger automatiquement les erreurs de linting
	@echo "üîß Correction automatique des erreurs..."
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run --fix; \
	else \
		echo "‚ö†Ô∏è  golangci-lint non install√©. Installation..."; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
		golangci-lint run --fix; \
	fi

lint: ## V√©rification du code avec formatage automatique
	@echo "üé® Formatage automatique..."
	@make fmt
	@echo "üîß Correction automatique..."
	@make fix
	@echo "üîç V√©rification finale..."
	go vet ./...
	@make validate-locales

check: ## V√©rification compl√®te avant commit
	@echo "üîÑ V√©rifications compl√®tes..."
	make validate-locales
	make lint
	make test-short
	make test-langs
	@if command -v govulncheck >/dev/null 2>&1; then \
		echo "üîí V√©rification des vuln√©rabilit√©s..."; \
		govulncheck ./...; \
	else \
		echo "‚ö†Ô∏è  govulncheck non install√©. Installation et v√©rification..."; \
		go install golang.org/x/vuln/cmd/govulncheck@latest; \
		govulncheck ./...; \
	fi
	@echo "‚úÖ V√©rifications termin√©es - pr√™t pour commit!"

format-all: fmt fix ## Formater et corriger automatiquement tout le code
	@echo "‚ú® Formatage et correction termin√©s"

bench: ## Benchmarks de performance
	@echo "‚è±Ô∏è  Benchmarks..."
	go test -bench=. -benchmem ./...



# Nouvelle langue
new-lang: ## Cr√©er un template pour une nouvelle langue (usage: make new-lang LANG=it)
	@if [ -z "$(LANG)" ]; then \
		echo "‚ùå Usage: make new-lang LANG=code_langue (ex: make new-lang LANG=it)"; \
		exit 1; \
	fi
	@if [ -f "locales/$(LANG).json" ]; then \
		echo "‚ùå Le fichier locales/$(LANG).json existe d√©j√†!"; \
		exit 1; \
	fi
	@echo "üåç Cr√©ation du template pour la langue: $(LANG)"
	@cp locales/en.json locales/$(LANG).json
	@echo "‚úÖ Template cr√©√©: locales/$(LANG).json"
	@echo "üìù √âditez maintenant ce fichier pour traduire les messages"

# Info sur les langues support√©es
langs: ## Afficher les langues support√©es
	@echo "üåç Langues support√©es:"
	@for file in locales/*.json; do \
		lang=$$(basename "$$file" .json); \
		echo "  - $$lang"; \
	done

# Package avec toutes les langues et architectures
package: build-all ## Cr√©er un package avec toutes les langues et architectures
	@echo "üì¶ Cr√©ation des packages..."
	@mkdir -p dist/tmp-amd64 dist/tmp-arm64
	@# Package AMD64
	@cp $(BINARY_NAME)-linux-amd64 dist/tmp-amd64/$(BINARY_NAME)
	@cp -r locales dist/tmp-amd64/
	@cp README.md dist/tmp-amd64/ 2>/dev/null || echo "README.md non trouv√©"
	@cp LICENSE dist/tmp-amd64/ 2>/dev/null || echo "LICENSE non trouv√©"
	@tar -czf dist/$(BINARY_NAME)-$(VERSION)-linux-amd64.tar.gz -C dist/tmp-amd64 .
	@# Package ARM64
	@cp $(BINARY_NAME)-linux-arm64 dist/tmp-arm64/$(BINARY_NAME)
	@cp -r locales dist/tmp-arm64/
	@cp README.md dist/tmp-arm64/ 2>/dev/null || echo "README.md non trouv√©"
	@cp LICENSE dist/tmp-arm64/ 2>/dev/null || echo "LICENSE non trouv√©"
	@tar -czf dist/$(BINARY_NAME)-$(VERSION)-linux-arm64.tar.gz -C dist/tmp-arm64 .
	@# Nettoyage des dossiers temporaires
	@rm -rf dist/tmp-amd64 dist/tmp-arm64
	@echo "‚úÖ Packages cr√©√©s:"
	@ls -la dist/$(BINARY_NAME)-$(VERSION)-linux-*.tar.gz

package-all: package build-deb-all ## Cr√©er tous les packages (tar.gz + deb) pour toutes les architectures
	@echo "üì¶ D√©placement des .deb vers dist/..."
	@mkdir -p dist
	@mv *.deb dist/ 2>/dev/null || echo "Aucun fichier .deb √† d√©placer"
	@echo "‚úÖ Tous les packages cr√©√©s dans dist/:"
	@ls -la dist/

# Test de la structure des fichiers de locales
test-locales-structure: ## Tester la structure et coh√©rence des fichiers de locales
	@echo "üß™ Test de la structure des fichiers de locales..."
	@if [ ! -d "locales" ]; then \
		echo "‚ùå Le dossier 'locales' n'existe pas!"; \
		exit 1; \
	fi
	@echo "‚úÖ Dossier 'locales' trouv√©"
	@if [ ! -f "locales/en.json" ]; then \
		echo "‚ùå Le fichier locales/en.json n'existe pas!"; \
		exit 1; \
	fi
	@echo "‚úÖ Fichier locales/en.json trouv√©"
	@echo "üîç Validation JSON de en.json..."
	@if command -v jq >/dev/null 2>&1; then \
		if ! jq empty "locales/en.json" 2>/dev/null; then \
			echo "‚ùå locales/en.json n'est pas un JSON valide!"; \
			exit 1; \
		fi; \
	else \
		if ! python3 -m json.tool "locales/en.json" >/dev/null 2>&1; then \
			echo "‚ùå locales/en.json n'est pas un JSON valide!"; \
			exit 1; \
		fi; \
	fi
	@echo "‚úÖ locales/en.json est un JSON valide"
	@echo "üîç Analyse de la structure des fichiers..."
	@if command -v jq >/dev/null 2>&1; then \
		EN_KEYS_COUNT=$$(jq -r 'keys | length' "locales/en.json"); \
		EN_KEYS=$$(jq -r 'keys | join(" ")' "locales/en.json"); \
		echo "üìä Fichier de r√©f√©rence en.json contient $$EN_KEYS_COUNT champs"; \
		for file in locales/*.json; do \
			filename=$$(basename "$$file"); \
			if [ "$$filename" != "en.json" ]; then \
				echo "üîç V√©rification de $$filename..."; \
				if ! jq empty "$$file" 2>/dev/null; then \
					echo "‚ùå $$filename n'est pas un JSON valide!"; \
					exit 1; \
				fi; \
				CURRENT_KEYS_COUNT=$$(jq -r 'keys | length' "$$file"); \
				CURRENT_KEYS=$$(jq -r 'keys | join(" ")' "$$file"); \
				if [ "$$CURRENT_KEYS_COUNT" -ne "$$EN_KEYS_COUNT" ]; then \
					echo "‚ùå $$filename contient $$CURRENT_KEYS_COUNT champs, mais en.json en contient $$EN_KEYS_COUNT!"; \
					exit 1; \
				fi; \
				if [ "$$CURRENT_KEYS" != "$$EN_KEYS" ]; then \
					echo "‚ùå $$filename ne contient pas les m√™mes champs que en.json!"; \
					echo "   Champs attendus: $$EN_KEYS"; \
					echo "   Champs trouv√©s:  $$CURRENT_KEYS"; \
					exit 1; \
				fi; \
				echo "‚úÖ $$filename est valide ($$CURRENT_KEYS_COUNT champs)"; \
			fi; \
		done; \
	else \
		EN_KEYS_COUNT=$$(python3 -c "import json; data=json.load(open('locales/en.json')); print(len(data.keys()))"); \
		EN_KEYS=$$(python3 -c "import json; data=json.load(open('locales/en.json')); print(' '.join(sorted(data.keys())))"); \
		echo "üìä Fichier de r√©f√©rence en.json contient $$EN_KEYS_COUNT champs"; \
		for file in locales/*.json; do \
			filename=$$(basename "$$file"); \
			if [ "$$filename" != "en.json" ]; then \
				echo "üîç V√©rification de $$filename..."; \
				if ! python3 -m json.tool "$$file" >/dev/null 2>&1; then \
					echo "‚ùå $$filename n'est pas un JSON valide!"; \
					exit 1; \
				fi; \
				CURRENT_KEYS_COUNT=$$(python3 -c "import json; data=json.load(open('$$file')); print(len(data.keys()))"); \
				CURRENT_KEYS=$$(python3 -c "import json; data=json.load(open('$$file')); print(' '.join(sorted(data.keys())))"); \
				if [ "$$CURRENT_KEYS_COUNT" -ne "$$EN_KEYS_COUNT" ]; then \
					echo "‚ùå $$filename contient $$CURRENT_KEYS_COUNT champs, mais en.json en contient $$EN_KEYS_COUNT!"; \
					exit 1; \
				fi; \
				if [ "$$CURRENT_KEYS" != "$$EN_KEYS" ]; then \
					echo "‚ùå $$filename ne contient pas les m√™mes champs que en.json!"; \
					echo "   Champs attendus: $$EN_KEYS"; \
					echo "   Champs trouv√©s:  $$CURRENT_KEYS"; \
					exit 1; \
				fi; \
				echo "‚úÖ $$filename est valide ($$CURRENT_KEYS_COUNT champs)"; \
			fi; \
		done; \
	fi
	@echo "üéâ Tous les fichiers de locales sont structurellement coh√©rents!"

# Ajoutez ces cibles √† votre Makefile existant (apr√®s la cible "help:")

# Installation des outils Go
install-tools: ## Installer tous les outils Go n√©cessaires
	@echo "üîß Installation des outils Go..."
	@echo "üì¶ Installation de govulncheck..."
	go install golang.org/x/vuln/cmd/govulncheck@latest
	@echo "üì¶ Installation de golangci-lint..."
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@echo "üì¶ Installation de goimports..."
	go install golang.org/x/tools/cmd/goimports@latest
	@echo "üì¶ Installation de gofumpt (formateur avanc√©)..."
	go install mvdan.cc/gofumpt@latest
	@echo "üì¶ Installation de staticcheck..."
	go install honnef.co/go/tools/cmd/staticcheck@latest
	@echo "üì¶ Installation de gosec..."
	go install github.com/securego/gosec/v2/cmd/gosec@latest
	@echo "‚úÖ Tous les outils Go install√©s avec succ√®s!"

check-tools: ## V√©rifier si tous les outils Go sont install√©s
	@echo "üîç V√©rification des outils Go..."
	@tools="govulncheck golangci-lint goimports gofumpt staticcheck gosec"; \
	missing=""; \
	for tool in $$tools; do \
		if command -v $$tool >/dev/null 2>&1; then \
			echo "‚úÖ $$tool: install√© ($$($$tool --version 2>/dev/null | head -n1 || echo 'version inconnue'))"; \
		else \
			echo "‚ùå $$tool: manquant"; \
			missing="$$missing $$tool"; \
		fi; \
	done; \
	if [ -n "$$missing" ]; then \
		echo "‚ö†Ô∏è  Outils manquants:$$missing"; \
		echo "üí° Ex√©cutez 'make install-tools' pour les installer"; \
		exit 1; \
	else \
		echo "üéâ Tous les outils sont install√©s!"; \
	fi

security: ## Analyse de s√©curit√© compl√®te
	@echo "üîí Analyse de s√©curit√© compl√®te..."
	@echo "üîç V√©rification des vuln√©rabilit√©s avec govulncheck..."
	govulncheck ./...
	@echo "üîç Analyse de s√©curit√© avec gosec..."
	gosec ./...
	@echo "‚úÖ Analyse de s√©curit√© termin√©e"

security-install: ## Installer et ex√©cuter l'analyse de s√©curit√©
	@echo "üîß Installation des outils de s√©curit√© si n√©cessaire..."
	@if ! command -v govulncheck >/dev/null 2>&1; then \
		echo "üì¶ Installation de govulncheck..."; \
		go install golang.org/x/vuln/cmd/govulncheck@latest; \
	fi
	@if ! command -v gosec >/dev/null 2>&1; then \
		echo "üì¶ Installation de gosec..."; \
		go install github.com/securego/gosec/v2/cmd/gosec@latest; \
	fi
	@make security

update-tools: ## Mettre √† jour tous les outils Go
	@echo "üîÑ Mise √† jour des outils Go..."
	@echo "üì¶ Mise √† jour de govulncheck..."
	go install golang.org/x/vuln/cmd/govulncheck@latest
	@echo "üì¶ Mise √† jour de golangci-lint..."
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@echo "üì¶ Mise √† jour de goimports..."
	go install golang.org/x/tools/cmd/goimports@latest
	@echo "üì¶ Mise √† jour de gofumpt..."
	go install mvdan.cc/gofumpt@latest
	@echo "üì¶ Mise √† jour de staticcheck..."
	go install honnef.co/go/tools/cmd/staticcheck@latest
	@echo "üì¶ Mise √† jour de gosec..."
	go install github.com/securego/gosec/v2/cmd/gosec@latest
	@echo "‚úÖ Tous les outils mis √† jour!"

# Versions am√©lior√©es des cibles existantes
fmt-advanced: ## Formatage avanc√© avec gofumpt
	@echo "üé® Formatage avanc√© du code..."
	@if command -v gofumpt >/dev/null 2>&1; then \
		echo "üì¶ Formatage avec gofumpt..."; \
		gofumpt -w .; \
	else \
		echo "‚ö†Ô∏è  gofumpt non install√©, utilisation de go fmt..."; \
		go fmt ./...; \
	fi
	@if command -v goimports >/dev/null 2>&1; then \
		echo "üì¶ Correction des imports..."; \
		goimports -w .; \
	else \
		echo "‚ö†Ô∏è  goimports non install√©. Installation..."; \
		go install golang.org/x/tools/cmd/goimports@latest; \
		goimports -w .; \
	fi

lint-all: ## V√©rification compl√®te avec tous les linters
	@echo "üîç V√©rification compl√®te du code..."
	@echo "üé® Formatage automatique..."
	@make fmt-advanced
	@echo "üîß golangci-lint..."
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run --fix; \
	else \
		echo "‚ö†Ô∏è  golangci-lint non install√©. Installation..."; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
		golangci-lint run --fix; \
	fi
	@echo "üîç staticcheck..."
	@if command -v staticcheck >/dev/null 2>&1; then \
		staticcheck ./...; \
	else \
		echo "‚ö†Ô∏è  staticcheck non install√©, passage..."; \
	fi
	@echo "üîç go vet..."
	go vet ./...
	@echo "üåç Validation des locales..."
	@make validate-locales
	@echo "‚úÖ V√©rification compl√®te termin√©e"

# Mise √† jour de la cible check pour inclure la s√©curit√©
check-complete: ## V√©rification compl√®te avant commit (avec s√©curit√©)
	@echo "üîÑ V√©rifications compl√®tes avec s√©curit√©..."
	make validate-locales
	make lint-all
	make test-short
	make test-langs
	make security-install
	@echo "‚úÖ V√©rifications compl√®tes termin√©es - pr√™t pour commit!"

# Cible pour les nouveaux d√©veloppeurs
setup-dev: ## Configuration compl√®te pour d√©veloppeur (premi√®re fois)
	@echo "üöÄ Configuration de l'environnement de d√©veloppement..."
	@echo "üìã V√©rification de Go..."
	@go version || (echo "‚ùå Go n'est pas install√©!" && exit 1)
	@echo "üîß Installation des outils de d√©veloppement..."
	@make install-tools
	@echo "üß™ Test de l'environnement..."
	@make check-complete
	@echo "‚úÖ Environnement de d√©veloppement configur√©!"
	@echo "üí° Commandes utiles:"
	@echo "   make help           - Afficher l'aide"
	@echo "   make dev            - Mode d√©veloppement"
	@echo "   make check-complete - V√©rification compl√®te"
	@echo "   make build-all      - Compiler pour toutes les architectures"

clean-tools: ## Nettoyer les outils Go (pour r√©installation propre)
	@echo "üßπ Nettoyage des outils Go..."
	@tools="govulncheck golangci-lint goimports gofumpt staticcheck gosec"; \
	for tool in $$tools; do \
		if [ -f "$(shell go env GOPATH)/bin/$$tool" ]; then \
			echo "üóëÔ∏è  Suppression de $$tool..."; \
			rm -f "$(shell go env GOPATH)/bin/$$tool"; \
		fi; \
	done
	@echo "‚úÖ Outils nettoy√©s. Ex√©cutez 'make install-tools' pour les r√©installer."

help: ## Afficher cette aide
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# Par d√©faut, afficher l'aide
.DEFAULT_GOAL := help
