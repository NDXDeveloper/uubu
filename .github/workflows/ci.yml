name: Build and Release uubu

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.22.2'
  BINARY_NAME: uubu

jobs:
  check:
    name: Pre-build Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Check locales structure
      run: make test-locales-structure

    - name: Validate locales JSON
      run: make validate-locales

    - name: Lint code
      run: make lint

    - name: Display version info
      run: make version

    - name: Run comprehensive checks
      run: make check

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: check
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test

    - name: Run verbose tests with race detection
      run: make test-verbose

    - name: Run short tests
      run: make test-short

    - name: Test with different languages
      run: make test-langs

    - name: Generate test coverage
      run: make test-coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build-multi-arch:
    name: Build Multi-Architecture Binaries
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build all architectures
      run: make build-all

    - name: List built binaries
      run: ls -la ${{ env.BINARY_NAME }}-linux-*

    - name: Upload AMD64 binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-linux-amd64
        path: ${{ env.BINARY_NAME }}-linux-amd64
        retention-days: 7

    - name: Upload ARM64 binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-linux-arm64
        path: ${{ env.BINARY_NAME }}-linux-arm64
        retention-days: 7

  package-deb-multi-arch:
    name: Build DEB Packages (Multi-Arch)
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build DEB packages for all architectures
      run: make build-deb-all

    - name: List DEB packages
      run: ls -la *.deb

    - name: Upload DEB packages
      uses: actions/upload-artifact@v3
      with:
        name: deb-packages
        path: "*.deb"
        retention-days: 30

  create-distribution-packages:
    name: Create Distribution Packages
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Create all packages (tar.gz + deb)
      run: make package-all

    - name: List all packages
      run: ls -la dist/

    - name: Upload distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: distribution-packages
        path: "dist/*"
        retention-days: 30

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: check
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run benchmarks
      run: make bench

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  test-architecture-detection:
    name: Test Architecture Detection
    runs-on: ubuntu-latest
    needs: build-multi-arch
    steps:
    - uses: actions/checkout@v4

    - name: Download AMD64 binary
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-linux-amd64
        path: ./binaries/

    - name: Download ARM64 binary
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-linux-arm64
        path: ./binaries/

    - name: Test AMD64 binary
      run: |
        chmod +x ./binaries/${{ env.BINARY_NAME }}-linux-amd64
        ./binaries/${{ env.BINARY_NAME }}-linux-amd64 --version

    - name: Verify binary architecture
      run: |
        echo "AMD64 binary info:"
        file ./binaries/${{ env.BINARY_NAME }}-linux-amd64
        echo "ARM64 binary info:"
        file ./binaries/${{ env.BINARY_NAME }}-linux-arm64

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-multi-arch, package-deb-multi-arch, create-distribution-packages]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release/

        # Copy all binary artifacts
        find artifacts/ -name "${{ env.BINARY_NAME }}-*" -type f -exec cp {} release/ \;

        # Copy DEB packages
        find artifacts/deb-packages/ -name "*.deb" -type f -exec cp {} release/ \;

        # Copy distribution packages
        find artifacts/distribution-packages/ -name "*" -type f -exec cp {} release/ \;

        # Create checksums
        cd release/
        sha256sum * > checksums.txt

        echo "📦 Release assets prepared:"
        ls -la

    - name: Extract changelog for version
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog section for current version
          awk "/^## \[?${VERSION#v}\]?/ {flag=1; next} /^## / && flag {exit} flag" CHANGELOG.md > release_notes.txt
          if [ ! -s release_notes.txt ]; then
            echo "See [CHANGELOG.md](CHANGELOG.md) for details." > release_notes.txt
          fi


    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        generate_release_notes: true
        body: |
          ## 🚀 uubu ${{ github.ref_name }}
          Ubuntu/Debian system updater with multi-architecture support and internationalization.

          ### 📦 Downloads
          #### Binaries
          - **🐧 Linux AMD64**: `uubu-linux-amd64`
          - **🦾 Linux ARM64**: `uubu-linux-arm64` (Raspberry Pi, ARM servers)

          #### Linux Packages
          - **📋 DEB AMD64**: `uubu-${{ github.ref_name }}-amd64.deb`
          - **📋 DEB ARM64**: `uubu-${{ github.ref_name }}-arm64.deb`

          #### Distribution Packages
          - **📦 Complete AMD64**: `uubu-${{ github.ref_name }}-linux-amd64.tar.gz`
          - **📦 Complete ARM64**: `uubu-${{ github.ref_name }}-linux-arm64.tar.gz`

          ### 🛠️ Installation
          #### Ubuntu/Debian (DEB - Recommended)
          **AMD64 systems:**
          ```bash
          wget https://github.com/NDXDeveloper/uubu/releases/download/${{ github.ref_name }}/uubu-${{ github.ref_name }}-amd64.deb
          sudo dpkg -i uubu-${{ github.ref_name }}-amd64.deb
          uubu --version
          ```

          **ARM64 systems (Raspberry Pi, etc.):**
          ```bash
          wget https://github.com/NDXDeveloper/uubu/releases/download/${{ github.ref_name }}/uubu-${{ github.ref_name }}-arm64.deb
          sudo dpkg -i uubu-${{ github.ref_name }}-arm64.deb
          uubu --version
          ```

          #### Manual installation (all architectures)
          ```bash
          # Linux AMD64
          chmod +x uubu-linux-amd64
          sudo mv uubu-linux-amd64 /usr/local/bin/uubu

          # Linux ARM64
          chmod +x uubu-linux-arm64
          sudo mv uubu-linux-arm64 /usr/local/bin/uubu
          ```

          ### ✨ Features
          - **System updates**: apt update, upgrade, dist-upgrade
          - **Package managers**: Snap and Flatpak support
          - **Snapshots**: Timeshift integration for safety
          - **Multi-language**: English, French, German, Spanish
          - **Multi-architecture**: AMD64 and ARM64 support
          - **Cleanup**: Automatic cache and obsolete package removal

          ### 🚀 Usage
          ```bash
          # Basic system update
          uubu

          # Update with Timeshift snapshot
          uubu -s

          # Distribution upgrade
          uubu --dist-upgrade

          # Skip Snap packages
          uubu --no-snap

          # Skip Flatpak packages
          uubu --no-flatpak

          # Show help
          uubu --help

          # Show version
          uubu --version
          ```

          ### 🌍 Language Support
          ```bash
          # French
          UUBU_LANG=fr uubu

          # German
          UUBU_LANG=de uubu

          # Spanish
          UUBU_LANG=es uubu
          ```

          ### 🔧 Technical Details
          - **Binary size**: ~13MB (includes embedded locales)
          - **Dependencies**: None (static binary)
          - **License**: MIT
          - **Architectures**: AMD64, ARM64
          - **Target**: Ubuntu/Debian systems

          ### 📋 Checksums
          Verify download integrity:
          ```bash
          wget https://github.com/NDXDeveloper/uubu/releases/download/${{ github.ref_name }}/checksums.txt
          sha256sum -c checksums.txt
          ```
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [check, test, build-multi-arch, package-deb-multi-arch, create-distribution-packages, security, benchmark, lint]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.check.result == 'success' && needs.test.result == 'success' && needs.build-multi-arch.result == 'success' }}
      run: |
        echo "✅ All jobs completed successfully!"
        echo "🎉 Build pipeline passed for uubu"
        echo "🏗️  Multi-architecture builds completed"
        echo "📦 Packages created for AMD64 and ARM64"

    - name: Notify on failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ One or more jobs failed!"
        echo "🔍 Check the logs for details"
        exit 1
